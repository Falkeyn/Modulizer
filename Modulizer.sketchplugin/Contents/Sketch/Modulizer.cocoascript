// Modulizer (cmd shift m)
/*
	Use cases:
	1. Merge selection to group and save the paddings in bottom background layer
	2. Restore paddings after content changing
	3. Change paddings value on bg layer name and update it's

*/

var doc;
var curentRect;
var contentRect;


function alert(msg, title) {
	title = title || "alert";
	var app = [NSApplication sharedApplication];
	[app displayDialog:msg withTitle:title];
}

function resizeLayer(layer, x, y, width, height) {
	[[layer frame] setWidth:width];
	[[layer frame] setHeight:height];
	[[layer frame] setX:x];
	[[layer frame] setY:y];
}

function getLayerRect(layer) {
	var result = {
		x: [[layer frame] x],
		y: [[layer frame] y], 
		width: [[layer frame] width],
		height: [[layer frame] height]
	}
	return result;
}

function testSelection(selection) {
	if ([selection count] == 0) {
		alert('Select one or more layers to convert them to the module with paddings. Select existing module for paddings update.\n\nTry again', 'Modulizer');
		return;
	}
	if ([selection count] == 1) {
		var curLayer = selection[0];
		if ([curLayer className] != "MSLayerGroup") {
			log("No group selected, selecting parentgroup");
			curLayer = [curLayer parentGroup];
			[curLayer select:true byExpandingSelection:false];
		}
		log("Ones selected ("+[curLayer className]+"). Updating group");
		return curLayer;
	}
	if ([selection count] > 1) {
		return selectionToGroup(selection);
	}
}

function getPaddings(currentLayer) {
	var groupLayers = [currentLayer layers];
	var bgLayer = groupLayers.objectAtIndex(0);
	
	// Измеряем размеры всей группы
	[currentLayer resizeRoot:null];
	curentRect = getLayerRect(currentLayer); 

	// Удаляем bgLayer чтобы измерить размеры контента
	[currentLayer removeLayer:bgLayer];
	[currentLayer resizeRoot:null];
	contentRect = getLayerRect(currentLayer);

	// Возращаем bgLayer на место, в конец группы
	currentLayer.addLayers([bgLayer]);
	[bgLayer select:true byExpandingSelection:false];
	[[doc actionWithName:"MSMoveToBackAction"] performAction:nil];
	[[bgLayer frame] setX:([[bgLayer frame] x] + (curentRect.x - contentRect.x))];
	[[bgLayer frame] setY:([[bgLayer frame] y] + (curentRect.y - contentRect.y))];

	var pTop = contentRect.y-curentRect.y;
	var pLeft = contentRect.x-curentRect.x;
	var pRight = curentRect.width - contentRect.width - pLeft;
	var pBottom = curentRect.height - contentRect.height - pTop;
	var padding = pTop + " " + pRight + " " + pBottom + " " + pLeft;

	return padding;
}

function askPaddings(padding) {
	var pads = padding.split(" ");

	var askText = "Set padding value";
	do {

		var answer = [doc askForUserInput:askText initialValue:padding];
		if (answer) {
			pads = answer.split(" ");
		} else {
			return null;
		}
		askText = "Wrong format. Try like a CSS: «20», «20 15» or «20 15 30 15»";
	} while (isNaN(parseInt(pads[0])));

	var pTop, pRight, pBottom, pLeft;
	if (pads.length >= 1) { pTop = pRight = pBottom = pLeft = parseInt(pads[0]) || 0; }
	if (pads.length >= 2) { pRight = pLeft = parseInt(pads[1]) || 0; }
	if (pads.length >= 3) { pBottom = parseInt(pads[2]) || 0; }
	if (pads.length >= 4) { pLeft = parseInt(pads[3]) || 0; }
	

	return pTop + " " + pRight + " " + pBottom + " " + pLeft;
}

function setPaddings(context) {
	doc = context.document;

	var currentLayer = testSelection(context.selection);

	var groupLayers = [currentLayer layers];
	var bgLayer = groupLayers.objectAtIndex(0);

	var curPadding = getPaddings(currentLayer);	// Вычесляем текущий паддинг
	var askPadding = askPaddings(curPadding);	// Спрашиваем не хочешь ли ты паддинг изменить

	if (!askPadding) { return }

	bgLayer.name = askPadding;
	[currentLayer resizeRoot:null];
	[currentLayer select:true byExpandingSelection:false];
	
	if (askPaddings == curPadding) {
		[doc showMessage: "Padding saved: "+padding];
	} else {
		restorePaddings(context);	// Если паддинг изменился, обновляем
	}

	
}

function restorePaddings(context) {
	doc = context.document;

	var currentLayer = testSelection(context.selection);

	var groupLayers = [currentLayer layers];
	var bgLayer = groupLayers.objectAtIndex(0);

	var padding = [bgLayer name];
	log("bgLayer.name = "+[bgLayer name]);
	var pads = padding.split(" ");

	var curPadding = getPaddings(currentLayer);	// Вычесляем текущий паддинг

	if(isNaN(parseInt(pads[0]))) {
		var askPadding = askPaddings(curPadding);	// Спрашиваем не хочешь ли ты паддинг изменить
		if (!askPadding) { return }
		
		padding = askPadding;
		bgLayer.name = askPadding;
		pads = askPadding.split(" ");
	}

	var pTop = parseInt(pads[0]);
	var pRight = parseInt(pads[1]);
	var pBottom = parseInt(pads[2]);
	var pLeft = parseInt(pads[3]);
	resizeLayer(bgLayer, -pLeft, -pTop, (contentRect.width + pLeft + pRight), (contentRect.height + pTop + pBottom));	

	[currentLayer resizeRoot:null];
	[currentLayer select:true byExpandingSelection:false];
	
	[doc showMessage: "Padding restored: "+padding];

}

/*
function updateGroup(currentLayer, context) {
	var doc = context.document;

	var groupLayers = [currentLayer layers];
	var groupLayersCount = [groupLayers count];
	var bgLayer = groupLayers.objectAtIndex(0);
	var bgName = [bgLayer name];


	// Измеряем размеры всей группы
	[currentLayer resizeRoot:null];
	var curentRect = getLayerRect(currentLayer); 

	// Удаляем bgLayer чтобы измерить размеры контента
	[currentLayer removeLayer:bgLayer];
	[currentLayer resizeRoot:null];
	var contentRect = getLayerRect(currentLayer);

	// Возращаем bgLayer на место, в конец группы
	currentLayer.addLayers([bgLayer]);
	[bgLayer select:true byExpandingSelection:false];
	[[doc actionWithName:"MSMoveToBackAction"] performAction:nil];
	[[bgLayer frame] setX:([[bgLayer frame] x] + (curentRect.x - contentRect.x))];
	[[bgLayer frame] setY:([[bgLayer frame] y] + (curentRect.y - contentRect.y))];
	//[currentLayer resizeRoot];


	var pTop, pRight, pBottom, pLeft;
	var padding = bgName.split(" ");

	var askText = "Verify padding for new module";
	if (!parseInt(padding[0])) do {
		pTop = contentRect.y-curentRect.y;
		pLeft = contentRect.x-curentRect.x;
		pRight = curentRect.width - contentRect.width - pLeft;
		pBottom = curentRect.height - contentRect.height - pTop;

		var answer = [doc askForUserInput:askText initialValue:pTop + " " + pRight + " " + pBottom + " " + pLeft];
		if (answer) {
			padding = answer.split(" ");
		} else {
			break;
		}
		askText = "Wrong format. Try like a CSS: «20», «20 15» or «20 15 30 15»";
	} while (isNaN(parseInt(padding[0])));

	if (!isNaN(parseInt(padding[0]))) {
		// Нашли в имени параметры отступов
		if (padding.length >= 1) { pTop = pRight = pBottom = pLeft = parseInt(padding[0]) || 0; }
		if (padding.length >= 2) { pRight = pLeft = parseInt(padding[1]) || 0; }
		if (padding.length >= 3) { pBottom = parseInt(padding[2]) || 0; }
		if (padding.length >= 4) { pLeft = parseInt(padding[3]) || 0; }
		bgLayer.name = pTop + " " + pRight + " " + pBottom + " " + pLeft;
		resizeLayer(bgLayer, -pLeft, -pTop, (contentRect.width + pLeft + pRight), (contentRect.height + pTop + pBottom));
		[currentLayer resizeRoot:null];
	}
	[currentLayer select:true byExpandingSelection:false];
}
*/

function selectionToGroup(selection) {
	log("Gather selected layers to new group");

	var firstLayer = selection[0];
	var parentGroup = [firstLayer parentGroup];
	var newGroup = [parentGroup addLayerOfType:"group"];
	var groupNames = new Array();

	firstLayer.name = "Bg";

	for (var i=0; i < [selection count]; i++){
		var item = selection[i];
		[[item parentGroup] removeLayer:item];
		newGroup.addLayers([item]);
		groupNames.push([item name]);
	}
	[newGroup setName:groupNames.join(" + ")];
	[newGroup resizeRoot:null];
	[newGroup select:true byExpandingSelection:false];

	return newGroup;
}

/*
function Modulizer(context) {
	var doc = context.document;
	var selection = context.selection;


	if ([selection count] == 0) {
		alert('Select one or more layers to convert them to the module with paddings. Select existing module for paddings update.\n\nTry again', 'Modulizer');
	}

	if ([selection count] == 1) {
		log("Ones selected. Updating group");
		updateGroup(selection[0], context);
	}

	if ([selection count] > 1) {
		log("Gather selected layers to new group");
		updateGroup(selectionToGroup(selection), context);
	}
}
*/
